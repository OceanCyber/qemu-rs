[package]
name = "qemu"
authors.workspace = true
categories.workspace = true
description = "QEMU binary installer"
edition.workspace = true
homepage.workspace = true
license.workspace = true
publish.workspace = true
readme.workspace = true
repository.workspace = true
version.workspace = true

[package.metadata.docs.rs]
rustc-args = ["--cfg", "docsrs"]

[[bin]]
name = "qemu-aarch64"
required-features = ["binaries", "aarch64-linux-user"]

[[bin]]
name = "qemu-aarch64_be"
required-features = ["binaries", "aarch64_be-linux-user"]

[[bin]]
name = "qemu-alpha"
required-features = ["binaries", "alpha-linux-user"]

[[bin]]
name = "qemu-arm"
required-features = ["binaries", "arm-linux-user"]

[[bin]]
name = "qemu-armeb"
required-features = ["binaries", "armeb-linux-user"]

[[bin]]
name = "qemu-cris"
required-features = ["binaries", "cris-linux-user"]

[[bin]]
name = "qemu-hexagon"
required-features = ["binaries", "hexagon-linux-user"]

[[bin]]
name = "qemu-hppa"
required-features = ["binaries", "hppa-linux-user"]

[[bin]]
name = "qemu-i386"
required-features = ["binaries", "i386-linux-user"]

[[bin]]
name = "qemu-loongarch64"
required-features = ["binaries", "loongarch64-linux-user"]

[[bin]]
name = "qemu-m68k"
required-features = ["binaries", "m68k-linux-user"]

[[bin]]
name = "qemu-microblaze"
required-features = ["binaries", "microblaze-linux-user"]

[[bin]]
name = "qemu-microblazeel"
required-features = ["binaries", "microblazeel-linux-user"]

[[bin]]
name = "qemu-mips"
required-features = ["binaries", "mips-linux-user"]

[[bin]]
name = "qemu-mips64"
required-features = ["binaries", "mips64-linux-user"]

[[bin]]
name = "qemu-mips64el"
required-features = ["binaries", "mips64el-linux-user"]

[[bin]]
name = "qemu-mipsel"
required-features = ["binaries", "mipsel-linux-user"]

[[bin]]
name = "qemu-mipsn32"
required-features = ["binaries", "mipsn32-linux-user"]

[[bin]]
name = "qemu-mipsn32el"
required-features = ["binaries", "mipsn32el-linux-user"]

[[bin]]
name = "qemu-nios2"
required-features = ["binaries", "nios2-linux-user"]

[[bin]]
name = "qemu-or1k"
required-features = ["binaries", "or1k-linux-user"]

[[bin]]
name = "qemu-ppc"
required-features = ["binaries", "ppc-linux-user"]

[[bin]]
name = "qemu-ppc64"
required-features = ["binaries", "ppc64-linux-user"]

[[bin]]
name = "qemu-ppc64le"
required-features = ["binaries", "ppc64le-linux-user"]

[[bin]]
name = "qemu-riscv32"
required-features = ["binaries", "riscv32-linux-user"]

[[bin]]
name = "qemu-riscv64"
required-features = ["binaries", "riscv64-linux-user"]

[[bin]]
name = "qemu-s390x"
required-features = ["binaries", "s390x-linux-user"]

[[bin]]
name = "qemu-sh4"
required-features = ["binaries", "sh4-linux-user"]

[[bin]]
name = "qemu-sh4eb"
required-features = ["binaries", "sh4eb-linux-user"]

[[bin]]
name = "qemu-sparc"
required-features = ["binaries", "sparc-linux-user"]

[[bin]]
name = "qemu-sparc32plus"
required-features = ["binaries", "sparc32plus-linux-user"]

[[bin]]
name = "qemu-sparc64"
required-features = ["binaries", "sparc64-linux-user"]

[[bin]]
name = "qemu-x86_64"
required-features = ["binaries", "x86_64-linux-user"]

[[bin]]
name = "qemu-xtensa"
required-features = ["binaries", "xtensa-linux-user"]

[[bin]]
name = "qemu-xtensaeb"
required-features = ["binaries", "xtensaeb-linux-user"]

[[bin]]
name = "qemu-system-aarch64"
required-features = ["binaries", "aarch64-softmmu"]

[[bin]]
name = "qemu-system-alpha"
required-features = ["binaries", "alpha-softmmu"]

[[bin]]
name = "qemu-system-arm"
required-features = ["binaries", "arm-softmmu"]

[[bin]]
name = "qemu-system-avr"
required-features = ["binaries", "avr-softmmu"]

[[bin]]
name = "qemu-system-cris"
required-features = ["binaries", "cris-softmmu"]

[[bin]]
name = "qemu-system-hppa"
required-features = ["binaries", "hppa-softmmu"]

[[bin]]
name = "qemu-system-i386"
required-features = ["binaries", "i386-softmmu"]

[[bin]]
name = "qemu-system-loongarch64"
required-features = ["binaries", "loongarch64-softmmu"]

[[bin]]
name = "qemu-system-m68k"
required-features = ["binaries", "m68k-softmmu"]

[[bin]]
name = "qemu-system-microblaze"
required-features = ["binaries", "microblaze-softmmu"]

[[bin]]
name = "qemu-system-microblazeel"
required-features = ["binaries", "microblazeel-softmmu"]

[[bin]]
name = "qemu-system-mips"
required-features = ["binaries", "mips-softmmu"]

[[bin]]
name = "qemu-system-mips64"
required-features = ["binaries", "mips64-softmmu"]

[[bin]]
name = "qemu-system-mips64el"
required-features = ["binaries", "mips64el-softmmu"]

[[bin]]
name = "qemu-system-mipsel"
required-features = ["binaries", "mipsel-softmmu"]

[[bin]]
name = "qemu-system-nios2"
required-features = ["binaries", "nios2-softmmu"]

[[bin]]
name = "qemu-system-or1k"
required-features = ["binaries", "or1k-softmmu"]

[[bin]]
name = "qemu-system-ppc"
required-features = ["binaries", "ppc-softmmu"]

[[bin]]
name = "qemu-system-ppc64"
required-features = ["binaries", "ppc64-softmmu"]

[[bin]]
name = "qemu-system-riscv32"
required-features = ["binaries", "riscv32-softmmu"]

[[bin]]
name = "qemu-system-riscv64"
required-features = ["binaries", "riscv64-softmmu"]

[[bin]]
name = "qemu-system-rx"
required-features = ["binaries", "rx-softmmu"]

[[bin]]
name = "qemu-system-s390x"
required-features = ["binaries", "s390x-softmmu"]

[[bin]]
name = "qemu-system-sh4"
required-features = ["binaries", "sh4-softmmu"]

[[bin]]
name = "qemu-system-sh4eb"
required-features = ["binaries", "sh4eb-softmmu"]

[[bin]]
name = "qemu-system-sparc"
required-features = ["binaries", "sparc-softmmu"]

[[bin]]
name = "qemu-system-sparc64"
required-features = ["binaries", "sparc64-softmmu"]

[[bin]]
name = "qemu-system-tricore"
required-features = ["binaries", "tricore-softmmu"]

[[bin]]
name = "qemu-system-x86_64"
required-features = ["binaries", "x86_64-softmmu"]

[[bin]]
name = "qemu-system-xtensa"
required-features = ["binaries", "xtensa-softmmu"]

[[bin]]
name = "qemu-system-xtensaeb"
required-features = ["binaries", "xtensaeb-softmmu"]

[target.'cfg(all(unix, target_os = "linux"))'.dependencies]
memfd-exec = { version = "0.2.1", optional = true }

[build-dependencies]
anyhow = "1.0.75"
command-ext = "0.1.1"
num_cpus = "1.13.0"
reqwest = { version = "0.11.23", default-features = false, features = [
    "rustls-tls",
    "blocking",
] }
tar = "0.4.40"
xz2 = "0.1.7"

[features]
# Enable the aarch64-softmmu target
aarch64-softmmu = []
# Enable the alpha-softmmu target
alpha-softmmu = []
# Enable the arm-softmmu target
arm-softmmu = []
# Enable the avr-softmmu target
avr-softmmu = []
# Enable the cris-softmmu target
cris-softmmu = []
# Enable the hppa-softmmu target
hppa-softmmu = []
# Enable the i386-softmmu target
i386-softmmu = []
# Enable the loongarch64-softmmu target
loongarch64-softmmu = []
# Enable the m68k-softmmu target
m68k-softmmu = []
# Enable the microblazeel-softmmu target
microblazeel-softmmu = []
# Enable the microblaze-softmmu target
microblaze-softmmu = []
# Enable the mips64el-softmmu target
mips64el-softmmu = []
# Enable the mips64-softmmu target
mips64-softmmu = []
# Enable the mipsel-softmmu target
mipsel-softmmu = []
# Enable the mips-softmmu target
mips-softmmu = []
# Enable the nios2-softmmu target
nios2-softmmu = []
# Enable the or1k-softmmu target
or1k-softmmu = []
# Enable the ppc64-softmmu target
ppc64-softmmu = []
# Enable the ppc-softmmu target
ppc-softmmu = []
# Enable the riscv32-softmmu target
riscv32-softmmu = []
# Enable the riscv64-softmmu target
riscv64-softmmu = []
# Enable the rx-softmmu target
rx-softmmu = []
# Enable the s390x-softmmu target
s390x-softmmu = []
# Enable the sh4eb-softmmu target
sh4eb-softmmu = []
# Enable the sh4-softmmu target
sh4-softmmu = []
# Enable the sparc64-softmmu target
sparc64-softmmu = []
# Enable the sparc-softmmu target
sparc-softmmu = []
# Enable the tricore-softmmu target
tricore-softmmu = []
# Enable the x86_64-softmmu target
x86_64-softmmu = []
# Enable the xtensaeb-softmmu target
xtensaeb-softmmu = []
# Enable the xtensa-softmmu target
xtensa-softmmu = []
# Enable the aarch64_be-linux-user target
aarch64_be-linux-user = []
# Enable the aarch64-linux-user target
aarch64-linux-user = []
# Enable the alpha-linux-user target
alpha-linux-user = []
# Enable the armeb-linux-user target
armeb-linux-user = []
# Enable the arm-linux-user target
arm-linux-user = []
# Enable the cris-linux-user target
cris-linux-user = []
# Enable the hexagon-linux-user target
hexagon-linux-user = []
# Enable the hppa-linux-user target
hppa-linux-user = []
# Enable the i386-linux-user target
i386-linux-user = []
# Enable the loongarch64-linux-user target
loongarch64-linux-user = []
# Enable the m68k-linux-user target
m68k-linux-user = []
# Enable the microblazeel-linux-user target
microblazeel-linux-user = []
# Enable the microblaze-linux-user target
microblaze-linux-user = []
# Enable the mips64el-linux-user target
mips64el-linux-user = []
# Enable the mips64-linux-user target
mips64-linux-user = []
# Enable the mipsel-linux-user target
mipsel-linux-user = []
# Enable the mips-linux-user target
mips-linux-user = []
# Enable the mipsn32el-linux-user target
mipsn32el-linux-user = []
# Enable the mipsn32-linux-user target
mipsn32-linux-user = []
# Enable the nios2-linux-user target
nios2-linux-user = []
# Enable the or1k-linux-user target
or1k-linux-user = []
# Enable the ppc64le-linux-user target
ppc64le-linux-user = []
# Enable the ppc64-linux-user target
ppc64-linux-user = []
# Enable the ppc-linux-user target
ppc-linux-user = []
# Enable the riscv32-linux-user target
riscv32-linux-user = []
# Enable the riscv64-linux-user target
riscv64-linux-user = []
# Enable the s390x-linux-user target
s390x-linux-user = []
# Enable the sh4eb-linux-user target
sh4eb-linux-user = []
# Enable the sh4-linux-user target
sh4-linux-user = []
# Enable the sparc32plus-linux-user target
sparc32plus-linux-user = []
# Enable the sparc64-linux-user target
sparc64-linux-user = []
# Enable the sparc-linux-user target
sparc-linux-user = []
# Enable the x86_64-linux-user target
x86_64-linux-user = []
# Enable the xtensaeb-linux-user target
xtensaeb-linux-user = []
# Enable the xtensa-linux-user target
xtensa-linux-user = []

softmmu = [
    "aarch64-softmmu",
    "alpha-softmmu",
    "arm-softmmu",
    "avr-softmmu",
    "cris-softmmu",
    "hppa-softmmu",
    "i386-softmmu",
    "loongarch64-softmmu",
    "m68k-softmmu",
    "microblazeel-softmmu",
    "microblaze-softmmu",
    "mips64el-softmmu",
    "mips64-softmmu",
    "mipsel-softmmu",
    "mips-softmmu",
    "nios2-softmmu",
    "or1k-softmmu",
    "ppc64-softmmu",
    "ppc-softmmu",
    "riscv32-softmmu",
    "riscv64-softmmu",
    "rx-softmmu",
    "s390x-softmmu",
    "sh4eb-softmmu",
    "sh4-softmmu",
    "sparc64-softmmu",
    "sparc-softmmu",
    "tricore-softmmu",
    "x86_64-softmmu",
    "xtensaeb-softmmu",
    "xtensa-softmmu",
]

linux-user = [
    "aarch64_be-linux-user",
    "aarch64-linux-user",
    "alpha-linux-user",
    "armeb-linux-user",
    "arm-linux-user",
    "cris-linux-user",
    "hexagon-linux-user",
    "hppa-linux-user",
    "i386-linux-user",
    "loongarch64-linux-user",
    "m68k-linux-user",
    "microblazeel-linux-user",
    "microblaze-linux-user",
    "mips64el-linux-user",
    "mips64-linux-user",
    "mipsel-linux-user",
    "mips-linux-user",
    "mipsn32el-linux-user",
    "mipsn32-linux-user",
    "nios2-linux-user",
    "or1k-linux-user",
    "ppc64le-linux-user",
    "ppc64-linux-user",
    "ppc-linux-user",
    "riscv32-linux-user",
    "riscv64-linux-user",
    "s390x-linux-user",
    "sh4eb-linux-user",
    "sh4-linux-user",
    "sparc32plus-linux-user",
    "sparc64-linux-user",
    "sparc-linux-user",
    "x86_64-linux-user",
    "xtensaeb-linux-user",
    "xtensa-linux-user",
]

default-targets = ["softmmu", "linux-user"]


# Enable the alsa audio driver
audio-drv-alsa = []
# Enable the coreaudio audio driver
audio-drv-coreaudio = []
# Enable the dsound audio driver
audio-drv-dsound = []
# Enable the jack audio driver
audio-drv-jack = []
# Enable the oss audio driver
audio-drv-oss = []
# Enable the PulseAudio audio driver
audio-drv-pa = []
# Enable the pipewire audio driver
audio-drv-pipewire = []
# Enable the sdl audio driver
audio-drv-sdl = []
# Enable the sndio audio driver
audio-drv-sndio = []
# Enable the default audio driver
audio-drv-default = []

default-audio-drv = ["audio-drv-default"]

# Enable static build
static = []
# Enable common debug build options
debug = []
# Enable compilation abort on warning
werror = []
# Enable plugins via shared library loading
plugins = []
# Enable the coroutine pool
coroutine-pool = []
# Enable debug symbols and other information
debug-info = []
# Enable the hexagon idef parser
hexagon-idef-parser = []
# Enable firmware blob installation
install-blobs = []
# Enable QOM cast debugging support
qom-cast-debug = []
# Enable Control Flow Integrity
cfi = []
# Enable verbose CFI debug errors
cfi-debug = []
# Graph lock debugging support
debug-graph-lock = []
# Enable mutex debugging
debug-mutex = []
# Enable coroutine stack usage debugging
debug-stack-usage = []
# Enable fuzzing targets
fuzzing = []
# Enable coverage tracking
gcov = []
# Enable QEMU profiling with gprof
gprof = []
# Enable link-time optimization
lto = []
# Try to load modules from alternate paths for upgrades
module-upgrades = []
# Enable dummy RNG
rng-none = []
# Enable safe stack
safe-stack = []
# Enable sanitizers
sanitizers = []
# Enable stripping of binaries
strip = []
# Enable TCG with bytecode interpreter (slow)
tcg-interpreter = []
# Enable thread sanitizer
tsan = []

default-options = [
    "werror",
    "coroutine-pool",
    "hexagon-idef-parser",
    "install-blobs",
    "qom-cast-debug",
]

# Enable dtrace backend
trace-backend-dtrace = []
# Enable ftrace backend
trace-backend-ftrace = []
# Enable log backend
trace-backend-log = []
# Enable nop backend
trace-backend-nop = []
# Enable simple backend
trace-backend-simple = []
# Enable syslog backend
trace-backend-syslog = []
# Enable ust backend
trace-backend-ust = []

default-trace-backend = ["trace-backend-log"]


# Enable auto coroutine backend
coroutine-backend-auto = []
# Enable sigaltstack coroutine backend
coroutine-backend-sigaltstack = []
# Enable ucontext coroutine backend
coroutine-backend-ucontext = []
# Enable windows coroutine backend
coroutine-backend-windows = []

default-coroutine-backend = ["coroutine-backend-auto"]

# Enable ALSA sound support
enable-feature-alsa = []
# Enable attr/xattr support
enable-feature-attr = []
# Enable PAM access control
enable-feature-auth-pam = []
# Enable AVX2 optimizations
enable-feature-avx2 = []
# Enable AVX512BW optimizations
enable-feature-avx512bw = []
# Enable AVX512F optimizations
enable-feature-avx512f = []
# Enable libblkio block device driver
enable-feature-blkio = []
# Enable bochs image format support
enable-feature-bochs = []
# Enable eBPF support
enable-feature-bpf = []
# Enable brlapi character device driver
enable-feature-brlapi = []
# Enable bzip2 support for DMG images
enable-feature-bzip2 = []
# Enable CanoKey support
enable-feature-canokey = []
# Enable cap_ng support
enable-feature-cap-ng = []
# Enable Whether and how to find the capstone library
enable-feature-capstone = []
# Enable cloop image format support
enable-feature-cloop = []
# Enable Cocoa user interface (macOS only)
enable-feature-cocoa = []
# Enable colo-proxy support
enable-feature-colo-proxy = []
# Enable CoreAudio sound support
enable-feature-coreaudio = []
# Enable Linux AF_ALG crypto backend driver
enable-feature-crypto-afalg = []
# Enable CURL block device driver
enable-feature-curl = []
# Enable curses UI
enable-feature-curses = []
# Enable -display dbus support
enable-feature-dbus-display = []
# Enable dmg image format support
enable-feature-dmg = []
# Enable Documentations build support
enable-feature-docs = []
# Enable DirectSound sound support
enable-feature-dsound = []
# Enable FUSE block device export
enable-feature-fuse = []
# Enable SEEK_HOLE/SEEK_DATA support for FUSE exports
enable-feature-fuse-lseek = []
# Enable libgcrypt cryptography support
enable-feature-gcrypt = []
# Enable Localization of the GTK+ user interface
enable-feature-gettext = []
# Enable use libgio for D-Bus support
enable-feature-gio = []
# Enable Glusterfs block device driver
enable-feature-glusterfs = []
# Enable GNUTLS cryptography support
enable-feature-gnutls = []
# Enable GTK+ user interface
enable-feature-gtk = []
# Enable clipboard support for the gtk UI (EXPERIMENTAL, MAY HANG)
enable-feature-gtk-clipboard = []
# Enable Build QEMU Guest Agent
enable-feature-guest-agent = []
# Enable Build MSI package for the QEMU Guest Agent
enable-feature-guest-agent-msi = []
# Enable HAX acceleration support
enable-feature-hax = []
# Enable HVF acceleration support
enable-feature-hvf = []
# Enable Font glyph conversion support
enable-feature-iconv = []
# Enable JACK sound support
enable-feature-jack = []
# Enable Linux keyring support
enable-feature-keyring = []
# Enable KVM acceleration support
enable-feature-kvm = []
# Enable l2tpv3 network backend support
enable-feature-l2tpv3 = []
# Enable libdaxctl support
enable-feature-libdaxctl = []
# Enable debuginfo support
enable-feature-libdw = []
# Enable libiscsi userspace initiator
enable-feature-libiscsi = []
# Enable Linux keyutils support
enable-feature-libkeyutils = []
# Enable libnfs block device driver
enable-feature-libnfs = []
# Enable libpmem support
enable-feature-libpmem = []
# Enable ssh block device support
enable-feature-libssh = []
# Enable Use libudev to enumerate host devices
enable-feature-libudev = []
# Enable libusb support for USB passthrough
enable-feature-libusb = []
# Enable build VDUSE Library
enable-feature-libvduse = []
# Enable Linux AIO support
enable-feature-linux-aio = []
# Enable Linux io_uring support
enable-feature-linux-io-uring = []
# Enable block migration in the main migration stream
enable-feature-live-block-migration = []
# Enable lzfse support for DMG images
enable-feature-lzfse = []
# Enable lzo compression support
enable-feature-lzo = []
# Enable enable libc malloc_trim() for memory optimization
enable-feature-malloc-trim = []
# Enable membarrier system call (for Linux 4.14+ or Windows
enable-feature-membarrier = []
# Enable modules support (non Windows)
enable-feature-modules = []
# Enable Multipath persistent reservation passthrough
enable-feature-mpath = []
# Enable Out of process device emulation support
enable-feature-multiprocess = []
# Enable netmap network backend support
enable-feature-netmap = []
# Enable nettle cryptography support
enable-feature-nettle = []
# Enable libnuma support
enable-feature-numa = []
# Enable NVMM acceleration support
enable-feature-nvmm = []
# Enable OpenGL support
enable-feature-opengl = []
# Enable OSS sound support
enable-feature-oss = []
# Enable PulseAudio sound support
enable-feature-pa = []
# Enable parallels image format support
enable-feature-parallels = []
# Enable PipeWire sound support
enable-feature-pipewire = []
# Enable PNG support with libpng
enable-feature-png = []
# Enable Enable PVRDMA support
enable-feature-pvrdma = []
# Enable qcow1 image format support
enable-feature-qcow1 = []
# Enable qed image format support
enable-feature-qed = []
# Enable build QGA VSS support (broken with MinGW)
enable-feature-qga-vss = []
# Enable Ceph block device driver
enable-feature-rbd = []
# Enable Enable RDMA-based migration
enable-feature-rdma = []
# Enable replication support
enable-feature-replication = []
# Enable SDL user interface
enable-feature-sdl = []
# Enable SDL Image support for icons
enable-feature-sdl-image = []
# Enable seccomp support
enable-feature-seccomp = []
# Enable SELinux support in qemu-nbd
enable-feature-selinux = []
# Enable libslirp user mode network backend support
enable-feature-slirp = []
# Enable use smbd (at path --smbd=*) in slirp networking
enable-feature-slirp-smbd = []
# Enable CA smartcard emulation support
enable-feature-smartcard = []
# Enable snappy compression support
enable-feature-snappy = []
# Enable sndio sound support
enable-feature-sndio = []
# Enable sparse checker
enable-feature-sparse = []
# Enable Spice server support
enable-feature-spice = []
# Enable Spice protocol support
enable-feature-spice-protocol = []
# Enable compiler-provided stack protection
enable-feature-stack-protector = []
# Enable TCG support
enable-feature-tcg = []
# Enable build support utilities that come with QEMU
enable-feature-tools = []
# Enable TPM support
enable-feature-tpm = []
# Enable U2F emulation support
enable-feature-u2f = []
# Enable libusbredir support
enable-feature-usb-redir = []
# Enable vde network backend support
enable-feature-vde = []
# Enable vdi image format support
enable-feature-vdi = []
# Enable VDUSE block export support
enable-feature-vduse-blk-export = []
# Enable vfio-user server support
enable-feature-vfio-user-server = []
# Enable vhdx image format support
enable-feature-vhdx = []
# Enable vhost-user crypto backend support
enable-feature-vhost-crypto = []
# Enable vhost kernel backend support
enable-feature-vhost-kernel = []
# Enable vhost-net kernel acceleration support
enable-feature-vhost-net = []
# Enable vhost-user backend support
enable-feature-vhost-user = []
# Enable build vhost-user-blk server
enable-feature-vhost-user-blk-server = []
# Enable vhost-vdpa kernel backend support
enable-feature-vhost-vdpa = []
# Enable virgl rendering support
enable-feature-virglrenderer = []
# Enable virtio-9p support
enable-feature-virtfs = []
# Enable virtio-9p proxy helper support
enable-feature-virtfs-proxy-helper = []
# Enable vmdk image format support
enable-feature-vmdk = []
# Enable vmnet.framework network backend support
enable-feature-vmnet = []
# Enable VNC server
enable-feature-vnc = []
# Enable JPEG lossy compression for VNC server
enable-feature-vnc-jpeg = []
# Enable SASL authentication for VNC server
enable-feature-vnc-sasl = []
# Enable vpc image format support
enable-feature-vpc = []
# Enable vte support for the gtk UI
enable-feature-vte = []
# Enable vvfat image format support
enable-feature-vvfat = []
# Enable WHPX acceleration support
enable-feature-whpx = []
# Enable Xen backend support
enable-feature-xen = []
# Enable Xen PCI passthrough support
enable-feature-xen-pci-passthrough = []
# Enable xkbcommon support
enable-feature-xkbcommon = []
# Enable zstd compression support
enable-feature-zstd = []
# Enable all system emulation targets
enable-feature-system = []
# Enable supported user emulation targets
enable-feature-user = []
# Enable all linux usermode emulation targets
enable-feature-linux-user = []
# Enable all BSD usermode emulation targets
enable-feature-bsd-user = []
# Enable Position Independent Executables
enable-feature-pie = []
# Enable TCG debugging (default is disabled)
enable-feature-debug-tcg = []

without-default-features = []

default = [
    "default-targets",
    "default-audio-drv",
    "default-options",
    "default-trace-backend",
    "default-coroutine-backend",
]

binaries = ["dep:memfd-exec"]
