[tasks.update-binary-deps]
script_runner = "@rust"
cwd = "binaries"
script = '''
//! ```cargo
//! [dependencies]
//! ```
use std::process::Command;
use std::fs::read_dir;
use std::path::PathBuf;

fn main() {
    for dir in read_dir(PathBuf::from(".")).unwrap() {
        let dir = dir.unwrap();
        if dir.file_type().unwrap().is_dir() {
            let path = dir.path();
            Command::new("cargo")
                .arg("update")
                .current_dir(&path)
                .status()
                .unwrap();
        }
    }
}
'''

[tasks.write-binary-readmes]
script_runner = "@rust"
cwd = "binaries"
script = '''
//! ```cargo
//! [dependencies]
//! ```
use std::process::Command;
use std::fs::read_dir;
use std::path::PathBuf;
use std::fs::write;

fn main() {
    for dir in read_dir(PathBuf::from(".")).unwrap() {
        let dir = dir.unwrap();
        if dir.file_type().unwrap().is_dir() {
            let path = dir.path().to_path_buf();
            let dir_name = path.file_name().unwrap().to_str().unwrap();
            let readme_path = path.join("README.md");
            let readme = format!(
                "# {}\n\nThis is a binary crate for the `qemu` crate
                 for a particular architecture.\n\n\
                 It is not intended to be used as a library.\n\n\
                 For more information, see the
                 [main repository](https://github.com/novafacing/qemu-rs)",
                dir_name
            );
            write(readme_path, readme).unwrap();

        }
    }
}
'''

[tasks.publish-binaries]
script_runner = "@rust"
cwd = "binaries"
script = '''
//! ```cargo
//! [dependencies]
//! ```
use std::process::Command;
use std::fs::read_dir;
use std::path::PathBuf;

fn main() {
    for dir in read_dir(PathBuf::from(".")).unwrap() {
        let dir = dir.unwrap();
        if dir.file_type().unwrap().is_dir() {
            let path = dir.path();
            Command::new("cargo")
                .arg("publish")
                .current_dir(&path)
                .status()
                .unwrap();
        }
    }
}
'''
